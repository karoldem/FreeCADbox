class greekParent:
	
	def __init__(self,x,y, xy):
		self.x = x
		self.y = y
		self.xy = xy
		self.history = []
	
	
	def move(self, length, pattern = None):
		
		if pattern is not None:
			length = pattern(self,length)
		
		if self.xy == 'x':
			
			App.ActiveDocument.Sketch.addGeometry(Part.LineSegment(
				App.Vector(     0.001*self.x,          0.001*(self.y),            0),
				App.Vector(     0.001*(self.x+length), 0.001*(self.y),            0)),
				False)
			
			self.x += length
			self.xy = 'y'
			
		else:
			
			App.ActiveDocument.Sketch.addGeometry(Part.LineSegment(
				App.Vector(     0.001*self.x,          0.001*(self.y),            0),
				App.Vector(     0.001*(self.x),        0.001*(self.y+length),     0)),
				False)
			
			self.y += length
			self.xy = 'x'
		
		self.history.append(length)
	
	
def zPattern(self,length):
	return length if self.history[-2] > 0 else -length

def cPattern(self,length):
	return -length if self.history[-2] > 0 else length

def rightPattern(self,length):
	
	if self.xy == 'x':
		return length if self.history[-1] > 0 else -length
	
	if self.xy == 'y':
		return -length if self.history[-1] > 0 else length

def leftPattern(self,length):
	
	if self.xy == 'x':
		return -length if self.history[-1] > 0 else length
	
	if self.xy == 'y':
		return length if self.history[-1] > 0 else -length



class greek(greekParent):
	
	def teeth(self, length, teethNumber, width, space, depth, direction, pattern = None):
		
		parent = greekParent(self.x, self.y, self.xy)
		firstMove = (length - teethNumber*width - (teethNumber-1)*space)//2
		lastMove = length - teethNumber*width - (teethNumber-1)*space - firstMove
		
		parent.move(firstMove,pattern)
		parent.move(depth, direction)
		parent.move(width, zPattern)
		parent.move(depth, cPattern)
		
		for i in range(teethNumber-1):
			parent.move(space, zPattern)
			parent.move(depth, cPattern)
			parent.move(space, zPattern)
			parent.move(depth, cPattern)

		parent.move(lastMove, zPattern)
		
		self.history.append(  parent.history[-1]   )
		self.x = parent.x
		self.y = parent.y
		self.xy = parent.xy



part = 'debug'
thick = 3650

if part == 'debug':
	k = greek(0,0,'x')
	k.teeth( 100000, 2, 10000, 10000, 10000, leftPattern)



App.ActiveDocument.Sketch.addConstraint(Sketcher.Constraint('Vertical',0)) 
App.ActiveDocument.Sketch.delConstraint(0)
