class greekParent:
	
	def __init__(self,x,y, xy):
		self.x = x
		self.y = y
		self.xy = xy
		self.history = []
	
	
	def move(self, length, pattern = None):
		
		if pattern is not None:
			length = pattern(self,length)
		
		if self.xy == 'x':
			
			Gui.ActiveDocument.getInEdit().Object.addGeometry(Part.LineSegment(
				App.Vector(     0.001*self.x,          0.001*(self.y),            0),
				App.Vector(     0.001*(self.x+length), 0.001*(self.y),            0)),
				False)
			
			self.x += length
			self.xy = 'y'
			
		else:
			
			Gui.ActiveDocument.getInEdit().Object.addGeometry(Part.LineSegment(
				App.Vector(     0.001*self.x,          0.001*(self.y),            0),
				App.Vector(     0.001*(self.x),        0.001*(self.y+length),     0)),
				False)
			
			self.y += length
			self.xy = 'x'
		
		self.history.append(length)


def zPattern(self,length):
	return length if self.history[-2] > 0 else -length

def cPattern(self,length):
	return -length if self.history[-2] > 0 else length

def rightPattern(self,length):
	
	if self.xy == 'x':
		return length if self.history[-1] > 0 else -length
	
	if self.xy == 'y':
		return -length if self.history[-1] > 0 else length

def leftPattern(self,length):
	
	if self.xy == 'x':
		return -length if self.history[-1] > 0 else length
	
	if self.xy == 'y':
		return length if self.history[-1] > 0 else -length



class greek(greekParent):
	
	def tooth(self, width, space, depth, direction):
		
		self.move(depth, direction)
		self.move(width, zPattern)
		self.move(depth, cPattern)
		self.move(space, zPattern)
		
		for _ in range(4):
			self.history.pop()
	
	def steps(self, steps, direction):
		
		currentLevel= 0
		
		for i in steps:
			self.move(i[0] - currentLevel, direction)
			currentLevel = i[0]
			self.move(i[1], zPattern)
			self.history.pop()
			self.history.pop()
		
		self.move(-currentLevel, direction)
		self.history.pop()

	
	def teeth(self, length, teethNumber, width, space, depth, direction, pattern = None):
		
		parent = greekParent(self.x, self.y, self.xy)
		firstMove = (length - teethNumber*width - (teethNumber-1)*space)//2
		lastMove = length - teethNumber*width - (teethNumber-1)*space - firstMove
		parent.history = list(self.history)
		
		parent.move(firstMove,pattern)
		parent.move(depth, direction)
		parent.move(width, zPattern)
		parent.move(depth, cPattern)
		
		for i in range(teethNumber-1):
			parent.move(space, zPattern)
			parent.move(depth, cPattern)
			parent.move(width, zPattern)
			parent.move(depth, cPattern)

		parent.move(lastMove, zPattern)
		
		self.history.append(  parent.history[-1]   )
		self.x = parent.x
		self.y = parent.y
		self.xy = parent.xy



heights = [50, 300, 250, 250, 200, 150]
heights = [i*1000 for i in heights]
middle = 250*1000
width = 500*1000
depth = 20*1000

k = greek(0,0,'x')
k.move(20000)
k.steps([ (10000,10000), (20000, 10000), (-10000, 5000)  ], leftPattern)


Gui.ActiveDocument.getInEdit().Object.addConstraint(Sketcher.Constraint('Vertical',0)) 
Gui.ActiveDocument.getInEdit().Object.delConstraint(0)
